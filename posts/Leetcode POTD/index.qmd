---
title: "Leetcode POTD"
author: "Ritesh Kumar Maurya"
date: "2024-05-24"
categories: [DSA]
image: "leetcode.jpg"
---

## 26 June 2024
+ [Balance a Binary Search Tree](https://leetcode.com/problems/balance-a-binary-search-tree/description/)
+ **Solution**
  - The approach is to make an arraylist where all the elements are in ascending order.
  - Since it is a BST, then inorder traversal can give that arraylist
  - Using that arraylist create another BST.

+ **Code**
```{java}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> arr;
    TreeNode fun(int low, int high){
        if(low>high){
            return null;
        }
        int mid = (low+high)/2;
        TreeNode root = new TreeNode(arr.get(mid));
        root.left = fun(low,mid-1);
        root.right = fun(mid+1,high);
        return root;
    }
    void inorder(TreeNode root){
        if(root==null){
            return;
        }
        inorder(root.left);
        arr.add(root.val);
        inorder(root.right);
    }
    public TreeNode balanceBST(TreeNode root) {
        arr = new ArrayList<>();
        inorder(root);
        return fun(0, arr.size()-1);
    }
}
```